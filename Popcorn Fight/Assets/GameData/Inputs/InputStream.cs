//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/GameData/Inputs/InputStream.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputStream: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputStream()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputStream"",
    ""maps"": [
        {
            ""name"": ""MouseInput"",
            ""id"": ""22be1c78-5e5e-4e93-9421-3f92bfa66284"",
            ""actions"": [
                {
                    ""name"": ""MouseClink"",
                    ""type"": ""Value"",
                    ""id"": ""db325fb6-51c6-4967-8f35-5913b7973002"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePressed"",
                    ""type"": ""Button"",
                    ""id"": ""0cbaf311-0949-4d5a-8378-28e8d5e731b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7724311c-9726-4903-85d5-acadf1de0121"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c18139a3-ed3b-4c1f-a007-bec35a745129"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseInput
        m_MouseInput = asset.FindActionMap("MouseInput", throwIfNotFound: true);
        m_MouseInput_MouseClink = m_MouseInput.FindAction("MouseClink", throwIfNotFound: true);
        m_MouseInput_MousePressed = m_MouseInput.FindAction("MousePressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseInput
    private readonly InputActionMap m_MouseInput;
    private List<IMouseInputActions> m_MouseInputActionsCallbackInterfaces = new List<IMouseInputActions>();
    private readonly InputAction m_MouseInput_MouseClink;
    private readonly InputAction m_MouseInput_MousePressed;
    public struct MouseInputActions
    {
        private @InputStream m_Wrapper;
        public MouseInputActions(@InputStream wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClink => m_Wrapper.m_MouseInput_MouseClink;
        public InputAction @MousePressed => m_Wrapper.m_MouseInput_MousePressed;
        public InputActionMap Get() { return m_Wrapper.m_MouseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseInputActions set) { return set.Get(); }
        public void AddCallbacks(IMouseInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseInputActionsCallbackInterfaces.Add(instance);
            @MouseClink.started += instance.OnMouseClink;
            @MouseClink.performed += instance.OnMouseClink;
            @MouseClink.canceled += instance.OnMouseClink;
            @MousePressed.started += instance.OnMousePressed;
            @MousePressed.performed += instance.OnMousePressed;
            @MousePressed.canceled += instance.OnMousePressed;
        }

        private void UnregisterCallbacks(IMouseInputActions instance)
        {
            @MouseClink.started -= instance.OnMouseClink;
            @MouseClink.performed -= instance.OnMouseClink;
            @MouseClink.canceled -= instance.OnMouseClink;
            @MousePressed.started -= instance.OnMousePressed;
            @MousePressed.performed -= instance.OnMousePressed;
            @MousePressed.canceled -= instance.OnMousePressed;
        }

        public void RemoveCallbacks(IMouseInputActions instance)
        {
            if (m_Wrapper.m_MouseInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseInputActions @MouseInput => new MouseInputActions(this);
    public interface IMouseInputActions
    {
        void OnMouseClink(InputAction.CallbackContext context);
        void OnMousePressed(InputAction.CallbackContext context);
    }
}
